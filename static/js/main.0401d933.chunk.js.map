{"version":3,"sources":["serviceWorker.js","LineDropdown.js","RadioButton.js","ConfigDialog.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","items","value","makeOption","item","index","react_default","a","createElement","disabled","separator","key","LineDropdown","Fragment","tableau_ui_min","kind","strInput","selected","map","Component","RadioButton","checkedValue","onChange","e","_this","setState","target","_this2","this","radioData","props","radioTitle","radioOption","i","checked","name","radioList","ConfigDialog","src_LineDropdown","src_RadioButton","React","ReactDOM","render","src_ConfigDialog","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0401d933.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { DropdownSelect } from '@tableau/tableau-ui'\r\n\r\nconst items = [\r\n    { value: 'alpha'},\r\n    { value: 'bravo'},\r\n    { value: 'charlie'},\r\n    { value: 'delta'},\r\n    { value: 'echo'}\r\n]\r\n\r\nconst makeDefaultOption = (strInput, index) =>\r\n    <option disabled selected=\"selected\">{strInput}</option>\r\n\r\nconst makeOption = (item, index) => \r\n    <option disabled={item.disabled || item.separator} key={index} value={item.value}>{item.value}</option>;\r\n\r\n\r\nclass LineDropdown extends Component {\r\n    render() {\r\n        return(\r\n            <>\r\n            <DropdownSelect kind='line'>\r\n                {makeDefaultOption('Please select dimension')}\r\n                {items.map(makeOption)}\r\n            </DropdownSelect>\r\n            <br/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LineDropdown","import React, { Component } from 'react';\r\nimport { Radio } from '@tableau/tableau-ui'\r\n\r\n\r\nclass RadioButton extends Component {\r\n    state = { checkedValue: 'one' };\r\n    onChange = (e) => this.setState({checkedValue: e.target.value});\r\n\r\n    render () {\r\n        const { radioData } = this.props;\r\n        const { radioTitle } = this.props;\r\n\r\n        return(\r\n            <>\r\n            <span>{radioTitle}</span>\r\n            <br/>\r\n            {radioData.map( (radioOption, i) =>\r\n                <React.Fragment key={i}>\r\n                <Radio \r\n                    checked={this.state.checkedValue === radioOption} \r\n                    onChange={this.onChange} \r\n                    name='ordinal' \r\n                    value={radioOption}>\r\n                    {radioOption}\r\n                </Radio>\r\n                <br/>\r\n                </React.Fragment> \r\n            )}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RadioButton\r\n\r\n/*\r\nclass RadioButton extends Component {\r\n    state = { checkedValue: 'one' };\r\n    onChange = (e) => this.setState({checkedValue: e.target.value});\r\n\r\n    render () {\r\n        return(\r\n            <>\r\n            <Radio checked={this.state.checkedValue === 'one'} onChange={this.onChange} name='ordinal' value='one'>One</Radio><br/>\r\n            <Radio checked={this.state.checkedValue === 'two'} onChange={this.onChange} name='ordinal' value='two'>Two</Radio><br/>\r\n            <Radio checked={this.state.checkedValue === 'three'} onChange={this.onChange} name='ordinal' value='three'>Three</Radio><br/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n*/\r\n","import React from 'react';\r\nimport LineDropdown from './LineDropdown.js'\r\nimport RadioButton from './RadioButton.js'\r\n\r\nlet radioList = ['one', 'two', 'three'];\r\n//<RadioButton radioData={['one', 'two', 'three','four']} radioTitle='This is Radio Titlez'/>\r\n\r\nclass ConfigDialog extends React.Component {\r\n    render() {\r\n        return(\r\n            <>\r\n            <h1>Tableau Extension D3 Sankey Diagram ConfigDialog.</h1>\r\n\r\n            <LineDropdown />\r\n            <br/>\r\n            <RadioButton radioData={radioList} radioTitle='This is Radio Titlez'/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfigDialog\r\n\r\n/*\r\nimport React from 'react';\r\nimport { Pill } from '@tableau/tableau-ui'\r\nimport { DropdownSelect } from '@tableau/tableau-ui'\r\n\r\nconst items = [\r\n    { value: 'alpha'},\r\n    { value: 'bravo'},\r\n    { value: 'charlie'},\r\n    { value: 'delta'},\r\n    { value: 'echo'}\r\n]\r\n\r\nconst makeDefaultOption = (strInput, index) =>\r\n    <option disabled selected=\"selected\">{strInput}</option>\r\n\r\nconst makeOption = (item, index) => \r\n    <option disabled={item.disabled || item.separator} key={index} value={item.value}>{item.value}</option>;\r\n\r\n\r\nclass ConfigDialog extends React.Component {\r\n    render() {\r\n        return(\r\n            <>\r\n            <h1>Tableau Extension D3 Sankey Diagram ConfigDialog.</h1>\r\n\r\n            <div style={{width: 150}}>\r\n                <Pill kind='discrete'>Discrete</Pill><br/>\r\n                <Pill kind='continuous'>Continuous</Pill><br/>\r\n                <Pill kind='other'>Other</Pill><br/>\r\n                <Pill kind='invalid'>Invalid</Pill><br/>\r\n            </div>\r\n\r\n            <DropdownSelect kind='line'>\r\n                {makeDefaultOption('Please select dimension')}\r\n                {items.map(makeOption)}\r\n            </DropdownSelect>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfigDialog\r\n\r\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ConfigDialog from './ConfigDialog.js';\n\nReactDOM.render(\n    <ConfigDialog />, \n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\n\n\n//import App from './App';\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n\n/*\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Pill } from '@tableau/tableau-ui'\nimport { DropdownSelect } from '@tableau/tableau-ui'\n\nconst items = [\n    { value: 'alpha'},\n    { value: 'bravo'},\n    { value: 'charlie'},\n    { value: 'delta'},\n    { value: 'echo'}\n]\n\nconst makeOption = (item, index) => \n    <option disabled={item.disabled || item.separator} key={index} value={item.value}>{item.value}</option>;\n\nconst initialState = {value: 'alpha'};\n\n\nReactDOM.render(\n    <>\n        <div style={{width: 150}}>\n            <Pill kind='discrete'>Discrete</Pill><br/>\n            <Pill kind='continuous'>Continuous</Pill><br/>\n            <Pill kind='other'>Other</Pill><br/>\n            <Pill kind='invalid'>Invalid</Pill><br/>\n        </div>\n        <DropdownSelect kind='line'>\n            {items.map(makeOption)}\n        </DropdownSelect>\n    </>, \n    document.getElementById('root')\n);\n*/"],"sourceRoot":""}